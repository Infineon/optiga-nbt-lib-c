@startuml hsw-apdu-nbt-interaction
title APDU NBT C Library
participant Application
box hsw-apdu-nbt library #FFF
participant "nbt-cmd" as nbt_cmd
participant "nbt-build-apdu" as nbt_build_apdu
participant "nbt-parse-response" as nbt_parse_response
box end
Application->nbt_cmd:nbt_initialize_command_set()
Application<--nbt_cmd:Initialisation successful
Application->nbt_cmd:nbt_get_data()
nbt_cmd->nbt_build_apdu: build_get_data()
nbt_cmd<--nbt_build_apdu: Built get data command APDU
nbt_cmd->nbt_cmd:apdu_transceive()
Application<--nbt_cmd:Receive get data response APDU
Application->nbt_parse_response:nbt_parse_applet_version(get_data_response_APDU)
nbt_parse_response->nbt_parse_response: Parse and get applet version information
Application<--nbt_parse_response:Receive applet version
@enduml

@startuml hsw-ndef-interaction
title NDEF C Library
participant Application
box hsw-ndef library #FFF
participant "ifx-ndef-record-uri" as uri_record
participant "ifx-ndef-message" as ndef_message
participant "ifx-ndef-record" as ndef_record
participant "ifx-record-handler-uri" as uri_record_handler
box end
Application->uri_record: ifx_record_uri_new(uri_record_handle)
uri_record->uri_record: Create record handle with \n**ifx_record_uri_t** data
Application<--uri_record: New uri_record_handle
Application->uri_record: ifx_record_uri_set_uri\n(uri_record_handle, uri)
uri_record->uri_record: Update uri_record_handle with **uri** data
Application<--uri_record: Updated uri record handle
Application->ndef_message: ifx_ndef_message_encode(uri_record_handle, 1,\n encoded_ndef_message)
ndef_message->ndef_record: record_handler_encode(uri_record_handle,\n encoded_ndef_record)
ndef_record->uri_record_handler: record_handler_uri_encode(encoded_uri_record, uri_record_data,\n uri_record_data_length 
uri_record_handler-->ndef_record: Encoded uri record
ndef_record-->ndef_message: Encoded ndef record
Application<--ndef_message: Encoded ndef messaage
Application->ndef_message: ifx_ndef_message_decode(ndef_message, \ncount_of_decoded_record_handles,\ndecoded_record_handles)
ndef_message->ndef_record: record_handler_decode(ndef_record, \ndecoded_record_handle)
ndef_record->uri_record_handler: record_handler_uri_decode(uri_record_data, uri_record_data_length,\n record_details)
uri_record_handler-->ndef_record: Decoded uri record
ndef_record-->ndef_message: Decoded uri record
Application<--ndef_message: Decoded record handles
Application->uri_record: ifx_record_uri_get_uri\n(decoded_record_handle, uri)
uri_record->uri_record: Get **uri** data \nfrom decoded record handle
Application<--uri_record: uri
@enduml

@startuml hsw-ndef-bp-interaction
title NBT NDEF Brand Protection C Library
participant Application
box hsw-ndef-bp library #FFF
participant "ifx-ndef-record-bp" as bp_record
participant "ifx-ndef-message" as ndef_message
participant "ifx-ndef-record" as ndef_record
participant "ifx-record-handler-bp" as bp_record_handler
box  end 
->bp_record: ifx_record_bp_register()
bp_record->ndef_record: ifx_ndef_record_register_handle()
ndef_record->bp_record: Registered BrandProtection record successfully
<-bp_record: Registered successfully
->bp_record: ifx_record_bp_new(bp_record_handle)
bp_record->bp_record: Create record handle with \n**ifx_record_bp_t** data
<--bp_record: New bp_record_handle
->bp_record: ifx_record_bp_set_certificate_handlers\n(bp_record_handle, certificate_encoder, certificate_decoder)
bp_record->bp_record: Update bp_record_handle with **certificate encoder and decoder** data
<--bp_record: Updated bp_record_handle
->bp_record: ifx_record_bp_set_certificate\n(bp_record_handle, certificate)
bp_record->bp_record: Update bp_record_handle with **certificate** data
<--bp_record: Updated bp_record_handle
->ndef_message: ifx_ndef_message_encode(bp_record_handle, 1,\n encoded_ndef_message)
ndef_message->ndef_record: record_handler_encode(bp_record_handle,\n encoded_ndef_record)
ndef_record->bp_record_handler: record_handler_bp_encode(encoded_bp_record, bp_record_data,\n bp_record_data_length 
bp_record_handler-->ndef_record: Updated encoded_bp_record
ndef_record-->ndef_message: Updated encoded_ndef_record
<--ndef_message: Updated encoded_ndef_messaage
->ndef_message: ifx_ndef_message_decode(ndef_message, \ncount_of_decoded_record_handles,\ndecoded_record_handles)
ndef_message->ndef_record: record_handler_decode(ndef_record, \ndecoded_record_handle)
ndef_record->bp_record_handler: record_handler_bp_decode(bp_record_data, bp_record_data_length,\n record_details)
bp_record_handler-->ndef_record: Decoded bp_record_data and bp_record_data_length
ndef_record-->ndef_message: Decoded decoded_record_handle
<--ndef_message: Decoded decoded_record_handles
->bp_record: ifx_record_bp_get_certificate\n(decoded_record_handle, certificate)
bp_record->bp_record: Get **certificate** data \nfrom decoded record handle
<--bp_record: certificate
@enduml

@startuml hsw-nbt-interaction
title OPTIGAâ„¢ Authenticate NBT Host Library for C
participant "User Application" as app
participant "hsw-ndef" as libndef
participant "hsw-apdu-nbt" as libnbt
participant "hsw-t1prime" as libt1prime

group Prepare the NDEF message
    app -> libndef: ifx_record_uri_new(uri_record_handle)
    app <-- libndef: Updated uri_record_handle
    app -> libndef: ifx_ndef_message_encode(&uri_record_handle, encoded_ndef_message, 1)
    app <-- libndef: uri record handle encoded as ndef message
end

group Initialize the communication channel
    app -> libt1prime: t1prime_initialize(&protocol, &i2c_driver)
    app <-- libt1prime: I2C Communication channel
end

group Update the NDEF message into NBT application
    app -> libnbt: nbt_initialize_command_set(&cmd_set, &protocol, &logger)
    app <-- libnbt: Commandset
    
    app -> libnbt: nbt_select_application()
    libnbt -> libnbt: build_select_application()
    libnbt -> libt1prime: apdu_transceive()
    libnbt <-- libt1prime: Receive response-APDU
    app <-- libnbt: Response

    app -> libnbt: nbt_select_file_by_id(&cmd_set, file_id)
    libnbt -> libnbt: build_select_file_by_id(file_id)
    libnbt -> libt1prime: apdu_transceive()
    libnbt <-- libt1prime: Receive response-APDU
    app <-- libnbt: Response

    app -> libnbt: nbt_update_binary(&cmd_set, offset, sizeof(ndef_message), ndef_message)
    libnbt -> libnbt: build_update_binary(offset, sizeof(ndef_mesesaage), ndef_message)
    libnbt -> libt1prime: apdu_transceive()
    libnbt <-- libt1prime: Receive response-APDU
    app <-- libnbt: Response
end

group Disconnect and dispose
    app -> libt1prime: t1prime_destroy()
    app <-- libt1prime: Success

end
@enduml
